import de.progra.charting.*;
import de.progra.charting.model.*;
import de.progra.charting.render.*;
import java.awt.*;
import java.io.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import org.apache.commons.*;
import org.apache.commons.math3.analysis.interpolation.LinearInterpolator;
import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

import com.sun.jmx.snmp.Timestamp;
import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

public class Test2 {
	static Database db = new Database();

	public static void makeFifthChart() {
		// Initializing some arrays
		
		int[] quadr = { 0, 1, 4, 9, 16, 25, 36 };
		int[] exp = { 1, 2, 4, 8, 16, 32, 64 };
		double[] columns = {1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0};//getStromTimestamp()/*{ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }*/;

		// Creating a data set array
		DefaultDataSet[] ds = new DefaultDataSet[1];

		// Filling all DataSets
//		ds[0] = new DefaultDataSet(ChartUtilities.transformArray(new int[] { 0, 6 }),
//				ChartUtilities.transformArray(new double[] { 0.0, 6.0 }), CoordSystem.FIRST_YAXIS, "Linear Growth");

		ds[0] = new DefaultDataSet(ChartUtilities.transformArray(strom), ChartUtilities.transformArray(columns),
				CoordSystem.FIRST_YAXIS, "STROM");

//		ds[2] = new DefaultDataSet(ChartUtilities.transformArray(exp), ChartUtilities.transformArray(columns),
//				CoordSystem.FIRST_YAXIS, "Exponential Growth");

		String title = "Stromverbrauch";

		int width = 640;
		int height = 480;

		DefaultChartDataModel data = new DefaultChartDataModel(ds);

		data.setAutoScale(true);

		DefaultChart c = new DefaultChart(data, title, DefaultChart.LINEAR_X_LINEAR_Y);

		c.addChartRenderer(new LineChartRenderer(c.getCoordSystem(), data), 1);

		c.setBounds(new Rectangle(0, 0, width, height));

		try {
			ChartEncoder.createPNG(new FileOutputStream(System.getProperty("user.home") + "/OneDrive/HTL/INFI-DBP Köllö/JOpenChart/chart2.png"), c);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static PolynomialSplineFunction getStromVerbrauch(){
		PolynomialSplineFunction interpolation;
		LinearInterpolator interpolator = new LinearInterpolator();
		ArrayList<Usage> strom = db.selectStromverbrauch();
		double[] xaxis =  new double[strom.size()];
		double[] yaxis = new double[strom.size()];
		for (int i = 1; i < strom.size(); i++) {
			long x = strom.get(i).getTimestamp();
			xaxis[i]=x;
			double y = strom.get(i).getValue();
			yaxis[i]=y;
		}
		return interpolation = interpolator.interpolate(xaxis, yaxis);
	}

	public static void main(String[] args) throws ParseException {
		int[][] data = new int[12][2];
		Calendar cal = Calendar.getInstance();
		Date datum;
		DateFormat formatter = new SimpleDateFormat("MM-dd-yyyy");
		for(int i=0;i<=11;i++){
			int days = cal.getActualMaximum(i);
			String datestringfirst = i+1+"-01-"+args[0];
			String datestringlast= i+1+"-"+days+"-"+args[0];
			datum = (Date) formatter.parse(datestringfirst);
			int firstvalue = (int) getStromVerbrauch().value(datum.getTime());
			datum = (Date) formatter.parse(datestringlast);
			int lastvalue = (int) getStromVerbrauch().value(datum.getTime());
			data[i][0] = (int) datum.getTime();
			data[i][1] = lastvalue - firstvalue;
		}
	}

}