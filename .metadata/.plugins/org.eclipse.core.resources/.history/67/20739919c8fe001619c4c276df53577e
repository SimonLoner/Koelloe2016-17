import de.progra.charting.*;
import de.progra.charting.model.*;
import de.progra.charting.render.*;
import java.awt.*;
import java.io.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import org.apache.commons.*;
import org.apache.commons.math3.analysis.interpolation.LinearInterpolator;
import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

import com.sun.jmx.snmp.Timestamp;
import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

public class Test2 {
	static Database db = new Database();

	public static void makeFifthChart(int[][] graph) {
		int[][] model = { { 23, 43, 12 }, { 54, -15, 34 }, { 99, 32, 45 } };

		String[] columns = { "1997", "1998", "1999" };

		String[] rows = { "foobar.com", "@foo Ltd.", "bar.online" };

		String title = "Average Growth 1997 - 1999";

		int width = 640;
		int height = 480;

		// Create the data model
		ObjectChartDataModel data = new ObjectChartDataModel(graph, columns, rows);

		// Create the chart with coordinate system and the given axis labels
		DefaultChart c = new DefaultChart(data, title, DefaultChart.LINEAR_X_LINEAR_Y, "Year", "Growth");

		// Set the coordinate system, the format for the x-axis values and the
		// coord. system layout
		c.setCoordSystem(new CoordSystem(data, new DecimalFormat(), false, true, false));

		// Add a bar chart renderer
		c.addChartRenderer(new BarChartRenderer(c.getCoordSystem(), data, new DecimalFormat(), new Font("sans", Font.ITALIC, 9), 1.0f), 1);

		c.setBounds(new Rectangle(0, 0, width, height));

		try {
			ChartEncoder.createPNG(new FileOutputStream(System.getProperty("user.home") + "/fourth.png"), c);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static PolynomialSplineFunction getVerbrauch() {
		LinearInterpolator interpolator = new LinearInterpolator();
		ArrayList<Usage> verbrauch = db.selectStromverbrauch();
		// ArrayList<Usage> verbrauch = db.selectWasserverbrauch();
		double[] xaxis = new double[verbrauch.size()];
		double[] yaxis = new double[verbrauch.size()];
		for (int i = 0; i < verbrauch.size(); i++) {
			long x = verbrauch.get(i).getTimestamp();
			// System.out.println("x"+i+": "+x+"\n");
			xaxis[i] = x;
			double y = verbrauch.get(i).getValue();
			// System.out.println("y"+i+": "+y+"\n");
			yaxis[i] = y;
		}
		return interpolator.interpolate(xaxis, yaxis);
	}

	public static int[][] absoluterVerbrauch() throws ParseException {
		PolynomialSplineFunction verbrauch = getVerbrauch();
		int[][] data = new int[12][2];
		Calendar cal = Calendar.getInstance();
		Date datum;
		DateFormat formatter = new SimpleDateFormat("MM-dd-yyyy");
		for (int i = 0; i < 12; i++) {
			cal.set(Calendar.MONTH, i);
			int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
			String datestringfirst = i + 1 + "-01-" + 2016;
			String datestringlast = i + 1 + "-" + days + "-" + 2016;
			datum = (Date) formatter.parse(datestringfirst);
			int firstvalue = (int) verbrauch.value(datum.getTime() / 1000L);
			datum = (Date) formatter.parse(datestringlast);
			int lastvalue = (int) verbrauch.value(datum.getTime() / 1000L);
			data[i][0] = (int) datum.getMonth();
			data[i][1] = lastvalue - firstvalue;
		}
		return data;
	}

	public static void main(String[] args) {
		int[][] graph;
		try {
			graph = absoluterVerbrauch();
			makeFifthChart(graph);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}